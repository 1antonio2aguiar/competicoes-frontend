
/*
  Este arquivo tem filtros pelo input e pelo campo de' pesquisa ng2 smart table
  só que a paginacao não funciona
*/

import { Component, OnInit, ViewChild } from '@angular/core';
import { LocalDataSource, ServerDataSource } from 'ng2-smart-table';
import { ActivatedRoute, Router } from '@angular/router';
import { Filters } from '../../../shared/filters/filters';

import { PontuacaoService } from '../pontuacao.service';
import { HttpParams, HttpClient } from '@angular/common/http';
import { filter } from 'rxjs-compat/operator/filter';

@Component({
  selector: 'ngx-pontuacao-iud',
  templateUrl: './pontuacao-iud.component.html',
  styleUrls: ['./pontuacao-iud.component.scss']
})

export class PontuacaoIudComponent implements OnInit {
  source: LocalDataSource = new LocalDataSource();
  filtro: Filters = new Filters();

  public settings = {
    pager: {
      perPage: this.filtro.itensPorPagina, // Define o número de linhas por página
      display: true, // Exibe o paginador
    },

    add: {
      addButtonContent: '<i class="nb-plus"></i>',
      createButtonContent: '<i class="nb-checkmark"></i>',
      cancelButtonContent: '<i class="nb-close"></i>',
      confirmCreate: true,
      width: '40px',
      addMode: 'edit',
    },

    edit: {
      editButtonContent: '<i class="nb-edit"></i>',
      saveButtonContent: '<i class="nb-checkmark"></i>',
      cancelButtonContent: '<i class="nb-close"></i>',
      confirmSave: true,
      addMode: 'edit',
      mode: 'edit'
    },
    delete: {
      deleteButtonContent: '<i class="nb-trash"></i>',
      confirmDelete: true,
    },
    columns: {
      id: {
        title: 'ID',
        type: 'number',
        editable: false,
        addable: false,
        filter: true,
        width: '20px',
      },
      
      classificacao: {
        title: 'Classificação',
        type: 'string',
        filter: true,
        width: '800px',
      },
      pontos: {
        title: 'Pontos',
        type: 'string',
        width: '100px',
      },
    },
  };

  ngOnInit(): void {
    this.listar();

    this.source.onChanged().subscribe((change) => {
      if (change.action === 'page') {
        this.aoMudarPagina(change.paging.page);
      }

      if (change.action === 'filter') {
        this.onTableFilter(change.filter);
      }
    });
    
  }

  constructor(private service: PontuacaoService, private _http: HttpClient, 

    private router: Router,
    private routeActive: ActivatedRoute) {

    this.source = new ServerDataSource(this._http, {
      dataKey: 'content',
      endPoint: 'http://localhost:8080/pontuacao/filter',
      pagerPageKey: 'page',
      pagerLimitKey: 'size',
      totalKey: 'totalElements',
    });
  }

  listar() {
    this.service.pesquisar(this.filtro)
      .then(response => {
        const pontuacao = response.pontuacao;
        this.source.load(pontuacao);
      });
  }

  onCreateConfirm(event) {
    event.newData.empresa = 1;

    this.service.create(event.newData)
      .subscribe(
          () => {
              this.listar();
              event.confirm.resolve();
          },
          error => console.error('Erro ao criar pontuacao:', error)
    );
  }

  onSaveConfirm(event) {
    this.service.update(event.newData)
      .subscribe(
        () => {
          // Atualiza a tabela e fecha o modal de edição
          this.listar();
          event.confirm.resolve();
          // O ng2-smart-table gerencia a atualização do estado de edição
      },
      error => console.error('Erro ao editar pontuacao:', error)
    );
  }

  onDeleteConfirm(event): void {
    if (window.confirm('Voce deseja deletar este item?')) {
      const id = event.data.id; // Obter o ID da modalidade a ser deletada

      this.service.delete(id)
        .subscribe(
          () => {
            // Atualiza a tabela com os dados mais recentes
            this.listar();
            event.confirm.resolve();
          },
          error => console.error('Erro ao deletar pontuacao:', error)
        );
    } else {
      event.confirm.reject();
    }
  }

  aoMudarPagina(pageIndex) {
    const loadedRecordCount = this.filtro.totalRegistros
    const lastRequestedRecordIndex = pageIndex * this.filtro.itensPorPagina;

    if (loadedRecordCount <= lastRequestedRecordIndex) {
      let myFilter; 
      myFilter.startIndex = loadedRecordCount + 1;

      this.service.pesquisar(myFilter) //.toPromise()
        .then(data => {
          if (this.source.count() > 0) {
            data.forEach(d => this.source.add(d));
            this.source.getAll()
              .then(d => this.source.load(d))
          }
          else
            this.source.load(data);
      })
    }
  }

  // Aqui filtra pelo campo de busca do ng2 smart teble
  // Nova função para lidar com os filtros da tabela
  onTableFilter(filters: any) {
    //console.log('Esta na função ', filters.filters[0].field)

    let params = new HttpParams();

    // Garante que filters seja um array
    let filtersArray = (filters && filters.filters && Array.isArray(filters.filters)) ? filters.filters : [];
    let idFilter = filtersArray.find(f => f.field === 'id');
    let classificacaoFilter = filtersArray.find(f => f.field === 'classificacao');


    console.log(' ta na funcao ', classificacaoFilter)
    

    if (idFilter) {
      params = params.set('id', idFilter.search);
    } else if (classificacaoFilter) {
      params = params.set('classificacao', classificacaoFilter.search);
    }

    this.filtro.params = params;

    this.service.pesquisar({...this.filtro, params: params})
      .then(response => {
        const pontuacao = response.pontuacao;
        this.source.load(pontuacao); // Carrega os dados na tabela
      });
  }

  // Aqui filtra pelo input.
  onSearch(query: string = '') {
      let params = new HttpParams();

      let isId = !isNaN(Number(query)); // Verifica se a query é um número (ID)
      //let isString = /[a-zA-Z]/.test(query);
    
    if (isId) {
      params = this.filtro.params.append('id', query)
      console.log('onSearch ', query, ' ', params)
    }

    let isString = isNaN(Number(query)) && query.length > 0;
    if(isString){
      params = this.filtro.params.append('classificacao', query)
    }
      
      this.service.pesquisar({...this.filtro, params: params})
      .then(response => {
          const pontuacao = response.pontuacao
          console.log('RETRONOU DO FILTRO ', pontuacao)
          this.source.load(pontuacao); // Carrega os dados na tabela
          
      });
  
      this.source.setFilter([
        {
          field: isId ? 'id' : 'classificacao', // Filtra no ng2-smart-table
          search: query,
        }
      ], false);

  }
}

html
====
<nb-card>
    <nb-card-header>
        Pontuação
    </nb-card-header>
    <nb-card-body>
        <!--<input #search class="search" type="text" placeholder="Buscar..." (keydown.enter)="onSearch(search.value)"> -->
        <input #search class="search" type="text" placeholder="Buscar..." (input)="onSearch(search.value)">
        <ng2-smart-table [settings]="settings" [source]="source" (createConfirm)="onCreateConfirm($event)"
            (editConfirm)="onSaveConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
        </ng2-smart-table>
    </nb-card-body>
</nb-card>


-----------------------------------------------------------------------------------

USANDO ServerDataSource

import { Component, OnInit, ViewChild } from '@angular/core';
import { LocalDataSource, ServerDataSource } from 'ng2-smart-table';
import { ActivatedRoute, Router } from '@angular/router';
import { Filters } from '../../../shared/filters/filters';

import { PontuacaoService } from '../pontuacao.service';
import { HttpParams, HttpClient } from '@angular/common/http';
import { filter } from 'rxjs-compat/operator/filter';

@Component({
  selector: 'ngx-pontuacao-iud',
  templateUrl: './pontuacao-iud.component.html',
  styleUrls: ['./pontuacao-iud.component.scss']
})

export class PontuacaoIudComponent implements OnInit {
  source: ServerDataSource;
  filtro: Filters = new Filters();

  searchTerm: string = ''; // Adicionado para controlar o termo de busca do input

  public settings = {
    pager: {
      perPage: this.filtro.itensPorPagina, // Define o número de linhas por página
      display: true, // Exibe o paginador
    },

    add: {
      addButtonContent: '<i class="nb-plus"></i>',
      createButtonContent: '<i class="nb-checkmark"></i>',
      cancelButtonContent: '<i class="nb-close"></i>',
      confirmCreate: true,
      width: '40px',
      addMode: 'edit',
    },

    edit: {
      editButtonContent: '<i class="nb-edit"></i>',
      saveButtonContent: '<i class="nb-checkmark"></i>',
      cancelButtonContent: '<i class="nb-close"></i>',
      confirmSave: true,
      addMode: 'edit',
      mode: 'edit'
    },
    delete: {
      deleteButtonContent: '<i class="nb-trash"></i>',
      confirmDelete: true,
    },
    columns: {
      id: {
        title: 'ID',
        type: 'number',
        editable: false,
        addable: false,
        filter: true, // Habilitar o filtro
        width: '20px',
        filterFunction: (cell: any, search: string) => { // Adicionado filterFunction
          return true; // Retornar true para sempre disparar o evento onChanged
        }
      },
      classificacao: {
        title: 'Classificação',
        type: 'string',
        filter: true, // Habilitar o filtro
        width: '800px',
        filterFunction: (cell: any, search: string) => { // Adicionado filterFunction
          return true; // Retornar true para sempre disparar o evento onChanged
        }
      },
      pontos: {
        title: 'Pontos',
        type: 'string',
        width: '100px',
      },
    },
  };

  ngOnInit(): void {
    this.source.onChanged().subscribe((change) => {
      if (change.action === 'filter') {
        //console.log('Filtro alterado:', change.filter.filters); // Para debug
        this.handleColumnFilters(change.filter.filters);
      }
    });
  }

  handleColumnFilters(filters: any[]): void {
    let queryParams: any[] = [];

    filters.forEach((filter) => {
      queryParams.push({
        field: filter.field,
        search: filter.search,
      });
    });
    console.log('chegou no handleColumnFilters :', queryParams); // Para debug

    this.source.setFilter(queryParams, true, false);
  }

  constructor(private service: PontuacaoService, private _http: HttpClient, 

    private router: Router,
    private routeActive: ActivatedRoute) {

      this.source = new ServerDataSource(this._http, {
        dataKey: 'content',
        endPoint: 'http://localhost:8080/pontuacao/filter',
        pagerPageKey: 'page',
        pagerLimitKey: 'size',
        totalKey: 'totalElements',
        searchKey: 'search', // Adicionado para enviar o termo de busca
        filterFieldKey: '' // Desabilita o envio de filtros individuais por coluna
      });
  }

  listar() {
    this.service.pesquisar(this.filtro)
      .then(response => {
        const pontuacao = response.pontuacao;
        this.source.load(pontuacao);
      });
  }

  onCreateConfirm(event) {
    event.newData.empresa = 1;

    this.service.create(event.newData)
      .subscribe(
          () => {
              //this.listar();
              this.source.refresh(); 
              event.confirm.resolve();
          },
          error => console.error('Erro ao criar pontuacao:', error)
    );
  }

  onSaveConfirm(event) {
    this.service.update(event.newData)
      .subscribe(
        () => {
          this.source.refresh(); 
          event.confirm.resolve();
      },
      error => console.error('Erro ao editar pontuacao:', error)
    );
  }

  onDeleteConfirm(event): void {
    if (window.confirm('Voce deseja deletar este item?')) {
      const id = event.data.id; // Obter o ID da modalidade a ser deletada

      this.service.delete(id)
        .subscribe(
          () => {
            this.source.refresh(); 
            event.confirm.resolve();
          },
          error => console.error('Erro ao deletar pontuacao:', error)
        );
    } else {
      event.confirm.reject();
    }
  }
  
}

